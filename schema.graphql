schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum FriendStatus {
  REQUESTED,
  ACCEPTED,
  BLOCKED
}

type Friend @aws_cognito_user_pools {
  id: ID!,
  sentBy: ID!,
  status: FriendStatus!
}

type User @aws_cognito_user_pools {
  id: ID!,
  name: String,
  avatarUrl: String
  friends: [Friend]
}

enum MessageContentType {
  TEXT,
  MEDIA,
  REACTION
}

type Message @aws_cognito_user_pools {
  id: ID
  conversationId: ID
  content: String!
  contentType: MessageContentType!
  sentBy: ID!
  replyTo: ID
  timestamp: AWSDateTime
  seenBy: [ID]
}

type MessagePage @aws_cognito_user_pools {
  items: [Message]
  cursor: String
}

type Conversation @aws_cognito_user_pools {
  id: ID!
  lastMessage: Message
  messages: MessagePage
}

type Result @aws_cognito_user_pools {
  success: Boolean
  error: String 
}

input FriendInput {
  id: ID!,
  status: FriendStatus!
}

input CreateUserInput {
  name: String!,
  avatarUrl: String!
}

input UpdateUserInput {
  name: String,
  avatarUrl: String
}

input CreateMessageInput {
  conversationId: ID!
  sentBy: ID
  content: String
  meta: String
}

input UpdateMessageInput {
  conversationId: ID!
  createdAt: AWSDateTime
  sentBy: ID
  content: String
}

type FriendEventOutput @aws_cognito_user_pools {
  from: ID
  to: ID
}

type Query @aws_cognito_user_pools {
  getUser(id: ID!): User
  suggestFriend(id: ID!): [User]
  listConversations(userId: ID!): [Conversation]
  getConversation(conversationId: ID!): Conversation
}

type Mutation @aws_cognito_user_pools {
  createUser(input: CreateUserInput!): Result
  updateUser(id: ID!, values: UpdateUserInput): User
  deleteUser(id: ID!): ID
  requestFriend(id: ID!): FriendEventOutput
  acceptFriend(id: ID!): FriendEventOutput
  rejectFriend(id: ID!): Result
  blockFriend(id: ID!): Result
  createMessage(input: CreateMessageInput!): Result 
  updateMessage(input: UpdateMessageInput!): Result 
  deleteMessage(conversationId: ID!, sentBy: ID!, createdAt: AWSDateTime!): Result
}

type Subscription @aws_cognito_user_pools {
  onFriendRequested(to: ID!): FriendEventOutput @aws_subscribe(mutations: ["requestFriend"])
  onFriendAccepted(to: ID!): FriendEventOutput @aws_subscribe(mutations: ["acceptFriend"])
}