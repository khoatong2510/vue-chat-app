schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum FriendStatus {
  REQUESTED,
  ACCEPTED,
  BLOCKED
}

type Friend @aws_cognito_user_pools {
  id: ID!,
  sentBy: ID!,
  status: FriendStatus!
}

type User @aws_cognito_user_pools {
  id: ID!,
  name: String,
  avatarUrl: String
  friends: [Friend]
}

type Result @aws_cognito_user_pools {
  success: Boolean
  error: String 
}

input FriendInput {
  id: ID!,
  status: FriendStatus!
}

input CreateUserInput {
  name: String!,
  avatarUrl: String!
}

input UpdateUserInput {
  name: String,
  avatarUrl: String
}

type FriendRequestOutput @aws_cognito_user_pools {
  from: ID
  to: ID
}

type Query {
  getUser(id: ID!): User @aws_cognito_user_pools
  listUsers: [User]
  suggestFriend(id: ID!): [User] @aws_cognito_user_pools
}

type Mutation {
  createUser(input: CreateUserInput!): Result @aws_cognito_user_pools
  updateUser(id: ID!, values: UpdateUserInput): User @aws_cognito_user_pools
  deleteUser(id: ID!): ID @aws_cognito_user_pools
  requestFriend(id: ID!): FriendRequestOutput @aws_cognito_user_pools
  acceptFriend(id: ID!): Result @aws_cognito_user_pools
  rejectFriend(id: ID!): Result @aws_cognito_user_pools
  blockFriend(id: ID!): Result @aws_cognito_user_pools
}

type Subscription {
  onFriendRequested(to: ID!): FriendRequestOutput @aws_cognito_user_pools  @aws_subscribe(mutations: ["requestFriend"])
}